---
welcome:
  ->: confirm
  message: |
    This is a tutorial to walk you through some patterns that might help
    you learning jinja and how it is used in the context of Tackle Box.

intro:
  ->: confirm
  message: |
    If you don't know anything about jinja...

    Jinja is a full featured templating languages that allows referencing of
    other objects and expression of logic within tackle box. So for instance
    if you had a input like this:

    ```
    name: Rob
    ```

    You could then reference that variable by wrapping the key with jinja:

    {% raw %}
    ```
    hello->: Hello {{ name }}!
    ```
    {% endraw %}

    Which would result in this output:

    ```
    name: Rob
    hello: Hello Rob!
    ```

    But thats just the start.  Follow allong to learn more about how to use jinja for:

      - Conditionals
      - Lists and loops
      - While loops (WIP)

example_conditionals:
  ->: confirm
  message: |
    A very common use of jinja in tackle box is for expressing conditionals.
    Setting a variable conditionally is done by including a `if` key to the hook.
    Because there is no reason to not render this field, it is rendered by default
    so you don't even need to wrap it with curly braces as you normally would do
    with jinja as every field in a hook is rendered by default.

    Here are a couple examples of some of those conditionals.

    ```
    # This line prompts the user and returns True or False
    confirm_stuff->: confirm Do you want to do things?

    do_stuff:
      ->: cmd echo 'Doing some stuff'
      if: confirm_stuff  # No need to wrap with braces
    ```

    Jinja adopts a lot of idioms of python and can also do logic to qualify expressions.

    ```
    # This line prompts the user and returns True or False
    stuff_to_do:
      ->: select What things would you like to do?
      choices:
        # Choices can either be a list or a list of maps where the value is shown
        - templates: Create modular code templates with tackle-box
        - workflows: Create workflows with tackle-box
        - boilerplate: Manage boilerplate

    do_stuff:
      ->: cmd echo 'Doing some stuff'
      if: confirm_stuff  # No need to wrap with braces
    ```

    {% raw %}
    colors:
      - blue
      - green
      - grey

    color_essays:
      ->: input
      message: The sky is {{item}}...
      for: colors  # Strings are also automatically rendered for loops
      if: colors|length > 0 # This saves an error if the list is empty

    bad_outcome:
      ->: print Wrong answer {{ name }}...
      if: wingspeed == 'I donno'

    This is qualified based on your answer to a previous question. If the previous
    question was a list, you can then

    To see it action...{% endraw %}

example_lists_loops:
  ->: confirm
  message: |
    For instance in this example there is a list that is used in a loop.

    colors:
      - blue
      - green
      - grey

    {% raw %}

    color_essays:
        ->: input
        message: Please tell me how much you like the color number {{index}}, {{item}}?
        default: Oh color {{item}}, you are so frickin cool...
        for: colors

      Here we see a reference to the color list and it iterates over the `item`
      as the iterand. This variable along with an integer `index` are injected
      into the context so that they can be rendered within the loop.

      To see it action...
    {% endraw %}

colors:
  - blue
  - green
  - grey

color_essays:
  ->: input
  message: Please tell me how much you like the color number {{index}}, {{item}}?
  default: Oh color {{item}}, you are so frickin cool...
  for: colors

ending:
  ->: confirm
  message: |

    This is a WIP tutorial.

    Stay tuned.
